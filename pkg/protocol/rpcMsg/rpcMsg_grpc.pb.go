// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: rpcMsg.proto

package rpcMsg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlMsgClient is the client API for ControlMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlMsgClient interface {
	SendHelloMsg(ctx context.Context, in *HelloMsg, opts ...grpc.CallOption) (*WelcomeMsg, error)
}

type controlMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewControlMsgClient(cc grpc.ClientConnInterface) ControlMsgClient {
	return &controlMsgClient{cc}
}

func (c *controlMsgClient) SendHelloMsg(ctx context.Context, in *HelloMsg, opts ...grpc.CallOption) (*WelcomeMsg, error) {
	out := new(WelcomeMsg)
	err := c.cc.Invoke(ctx, "/rpcMsg.ControlMsg/SendHelloMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlMsgServer is the server API for ControlMsg service.
// All implementations must embed UnimplementedControlMsgServer
// for forward compatibility
type ControlMsgServer interface {
	SendHelloMsg(context.Context, *HelloMsg) (*WelcomeMsg, error)
	mustEmbedUnimplementedControlMsgServer()
}

// UnimplementedControlMsgServer must be embedded to have forward compatible implementations.
type UnimplementedControlMsgServer struct {
}

func (UnimplementedControlMsgServer) SendHelloMsg(context.Context, *HelloMsg) (*WelcomeMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHelloMsg not implemented")
}
func (UnimplementedControlMsgServer) mustEmbedUnimplementedControlMsgServer() {}

// UnsafeControlMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlMsgServer will
// result in compilation errors.
type UnsafeControlMsgServer interface {
	mustEmbedUnimplementedControlMsgServer()
}

func RegisterControlMsgServer(s grpc.ServiceRegistrar, srv ControlMsgServer) {
	s.RegisterService(&ControlMsg_ServiceDesc, srv)
}

func _ControlMsg_SendHelloMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlMsgServer).SendHelloMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpcMsg.ControlMsg/SendHelloMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlMsgServer).SendHelloMsg(ctx, req.(*HelloMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlMsg_ServiceDesc is the grpc.ServiceDesc for ControlMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpcMsg.ControlMsg",
	HandlerType: (*ControlMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHelloMsg",
			Handler:    _ControlMsg_SendHelloMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcMsg.proto",
}
